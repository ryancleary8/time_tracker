<<<<<<< ours
import type { DurationMilliseconds, ISODateTimeString } from "./common";

/**
 * Represents a single tracked work session.
 */
export interface Session {
  /** Unique identifier for the session. */
  id: string;
  /** ISO timestamp marking when the session started. */
  startedAt: ISODateTimeString;
  /** ISO timestamp marking when the session ended. */
  endedAt?: ISODateTimeString;
  /** Optional pre-computed duration of the session in milliseconds. */
  durationMs?: DurationMilliseconds;
  /** Identifier for the category associated with the session. */
  category: string;
  /** Additional free-form notes about the session. */
  notes?: string;
  /** ISO timestamp for when the session entity was created. */
  createdAt: ISODateTimeString;
  /** ISO timestamp for the last update to the session entity. */
  updatedAt: ISODateTimeString;
}

/**
 * Represents the payload required to create a new session.
 * Derived fields such as `id` and timestamps are omitted because they will be
 * generated by the application.
 *
 * @example
 * const draft: NewSession = {
 *   startedAt: "2023-05-01T09:00:00.000Z",
 *   category: "development"
 * };
 */
export type NewSession = Pick<Session, "startedAt" | "endedAt" | "category" | "notes">;

/**
 * Partial update payload for an existing session.
 */
export type SessionUpdate = Partial<Omit<Session, "id" | "createdAt">>;
=======
export interface Session {
  id: string;
  startedAt: string;
  endedAt?: string | null;
  description?: string | null;
  categoryId?: string | null;
  createdAt?: string;
  updatedAt?: string;
}
>>>>>>> theirs
